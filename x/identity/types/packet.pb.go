// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: identity/packet.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IdentityPacketData struct {
	// Types that are valid to be assigned to Packet:
	//	*IdentityPacketData_NoData
	//	*IdentityPacketData_IbcPermissionUpdatePacket
	//	*IdentityPacketData_IbcRegistrationPacket
	Packet isIdentityPacketData_Packet `protobuf_oneof:"packet"`
}

func (m *IdentityPacketData) Reset()         { *m = IdentityPacketData{} }
func (m *IdentityPacketData) String() string { return proto.CompactTextString(m) }
func (*IdentityPacketData) ProtoMessage()    {}
func (*IdentityPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_62d7a4d2802770dc, []int{0}
}
func (m *IdentityPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdentityPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdentityPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdentityPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityPacketData.Merge(m, src)
}
func (m *IdentityPacketData) XXX_Size() int {
	return m.Size()
}
func (m *IdentityPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityPacketData proto.InternalMessageInfo

type isIdentityPacketData_Packet interface {
	isIdentityPacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IdentityPacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=noData,proto3,oneof" json:"noData,omitempty"`
}
type IdentityPacketData_IbcPermissionUpdatePacket struct {
	IbcPermissionUpdatePacket *IbcPermissionUpdatePacketData `protobuf:"bytes,3,opt,name=ibcPermissionUpdatePacket,proto3,oneof" json:"ibcPermissionUpdatePacket,omitempty"`
}
type IdentityPacketData_IbcRegistrationPacket struct {
	IbcRegistrationPacket *IbcRegistrationPacketData `protobuf:"bytes,2,opt,name=ibcRegistrationPacket,proto3,oneof" json:"ibcRegistrationPacket,omitempty"`
}

func (*IdentityPacketData_NoData) isIdentityPacketData_Packet()                    {}
func (*IdentityPacketData_IbcPermissionUpdatePacket) isIdentityPacketData_Packet() {}
func (*IdentityPacketData_IbcRegistrationPacket) isIdentityPacketData_Packet()     {}

func (m *IdentityPacketData) GetPacket() isIdentityPacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *IdentityPacketData) GetNoData() *NoData {
	if x, ok := m.GetPacket().(*IdentityPacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (m *IdentityPacketData) GetIbcPermissionUpdatePacket() *IbcPermissionUpdatePacketData {
	if x, ok := m.GetPacket().(*IdentityPacketData_IbcPermissionUpdatePacket); ok {
		return x.IbcPermissionUpdatePacket
	}
	return nil
}

func (m *IdentityPacketData) GetIbcRegistrationPacket() *IbcRegistrationPacketData {
	if x, ok := m.GetPacket().(*IdentityPacketData_IbcRegistrationPacket); ok {
		return x.IbcRegistrationPacket
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IdentityPacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IdentityPacketData_NoData)(nil),
		(*IdentityPacketData_IbcPermissionUpdatePacket)(nil),
		(*IdentityPacketData_IbcRegistrationPacket)(nil),
	}
}

type NoData struct {
}

func (m *NoData) Reset()         { *m = NoData{} }
func (m *NoData) String() string { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()    {}
func (*NoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_62d7a4d2802770dc, []int{1}
}
func (m *NoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoData.Merge(m, src)
}
func (m *NoData) XXX_Size() int {
	return m.Size()
}
func (m *NoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NoData.DiscardUnknown(m)
}

var xxx_messageInfo_NoData proto.InternalMessageInfo

// IbcRegistrationPacketData defines a struct for the packet payload
type IbcRegistrationPacketData struct {
	Handle string `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *IbcRegistrationPacketData) Reset()         { *m = IbcRegistrationPacketData{} }
func (m *IbcRegistrationPacketData) String() string { return proto.CompactTextString(m) }
func (*IbcRegistrationPacketData) ProtoMessage()    {}
func (*IbcRegistrationPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_62d7a4d2802770dc, []int{2}
}
func (m *IbcRegistrationPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IbcRegistrationPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IbcRegistrationPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IbcRegistrationPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IbcRegistrationPacketData.Merge(m, src)
}
func (m *IbcRegistrationPacketData) XXX_Size() int {
	return m.Size()
}
func (m *IbcRegistrationPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_IbcRegistrationPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_IbcRegistrationPacketData proto.InternalMessageInfo

func (m *IbcRegistrationPacketData) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

func (m *IbcRegistrationPacketData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// IbcRegistrationPacketAck defines a struct for the packet acknowledgment
type IbcRegistrationPacketAck struct {
	DsnpId string `protobuf:"bytes,1,opt,name=dsnpId,proto3" json:"dsnpId,omitempty"`
}

func (m *IbcRegistrationPacketAck) Reset()         { *m = IbcRegistrationPacketAck{} }
func (m *IbcRegistrationPacketAck) String() string { return proto.CompactTextString(m) }
func (*IbcRegistrationPacketAck) ProtoMessage()    {}
func (*IbcRegistrationPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_62d7a4d2802770dc, []int{3}
}
func (m *IbcRegistrationPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IbcRegistrationPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IbcRegistrationPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IbcRegistrationPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IbcRegistrationPacketAck.Merge(m, src)
}
func (m *IbcRegistrationPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *IbcRegistrationPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_IbcRegistrationPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_IbcRegistrationPacketAck proto.InternalMessageInfo

func (m *IbcRegistrationPacketAck) GetDsnpId() string {
	if m != nil {
		return m.DsnpId
	}
	return ""
}

// IbcPermissionUpdatePacketData defines a struct for the packet payload
type IbcPermissionUpdatePacketData struct {
	PublicKey string `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Role      string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	Sender    string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	DsnpId    string `protobuf:"bytes,4,opt,name=dsnpId,proto3" json:"dsnpId,omitempty"`
}

func (m *IbcPermissionUpdatePacketData) Reset()         { *m = IbcPermissionUpdatePacketData{} }
func (m *IbcPermissionUpdatePacketData) String() string { return proto.CompactTextString(m) }
func (*IbcPermissionUpdatePacketData) ProtoMessage()    {}
func (*IbcPermissionUpdatePacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_62d7a4d2802770dc, []int{4}
}
func (m *IbcPermissionUpdatePacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IbcPermissionUpdatePacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IbcPermissionUpdatePacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IbcPermissionUpdatePacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IbcPermissionUpdatePacketData.Merge(m, src)
}
func (m *IbcPermissionUpdatePacketData) XXX_Size() int {
	return m.Size()
}
func (m *IbcPermissionUpdatePacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_IbcPermissionUpdatePacketData.DiscardUnknown(m)
}

var xxx_messageInfo_IbcPermissionUpdatePacketData proto.InternalMessageInfo

func (m *IbcPermissionUpdatePacketData) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *IbcPermissionUpdatePacketData) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *IbcPermissionUpdatePacketData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *IbcPermissionUpdatePacketData) GetDsnpId() string {
	if m != nil {
		return m.DsnpId
	}
	return ""
}

// IbcPermissionUpdatePacketAck defines a struct for the packet acknowledgment
type IbcPermissionUpdatePacketAck struct {
	Publickey string `protobuf:"bytes,1,opt,name=publickey,proto3" json:"publickey,omitempty"`
}

func (m *IbcPermissionUpdatePacketAck) Reset()         { *m = IbcPermissionUpdatePacketAck{} }
func (m *IbcPermissionUpdatePacketAck) String() string { return proto.CompactTextString(m) }
func (*IbcPermissionUpdatePacketAck) ProtoMessage()    {}
func (*IbcPermissionUpdatePacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_62d7a4d2802770dc, []int{5}
}
func (m *IbcPermissionUpdatePacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IbcPermissionUpdatePacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IbcPermissionUpdatePacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IbcPermissionUpdatePacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IbcPermissionUpdatePacketAck.Merge(m, src)
}
func (m *IbcPermissionUpdatePacketAck) XXX_Size() int {
	return m.Size()
}
func (m *IbcPermissionUpdatePacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_IbcPermissionUpdatePacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_IbcPermissionUpdatePacketAck proto.InternalMessageInfo

func (m *IbcPermissionUpdatePacketAck) GetPublickey() string {
	if m != nil {
		return m.Publickey
	}
	return ""
}

func init() {
	proto.RegisterType((*IdentityPacketData)(nil), "amparks100.registry.identity.IdentityPacketData")
	proto.RegisterType((*NoData)(nil), "amparks100.registry.identity.NoData")
	proto.RegisterType((*IbcRegistrationPacketData)(nil), "amparks100.registry.identity.IbcRegistrationPacketData")
	proto.RegisterType((*IbcRegistrationPacketAck)(nil), "amparks100.registry.identity.IbcRegistrationPacketAck")
	proto.RegisterType((*IbcPermissionUpdatePacketData)(nil), "amparks100.registry.identity.IbcPermissionUpdatePacketData")
	proto.RegisterType((*IbcPermissionUpdatePacketAck)(nil), "amparks100.registry.identity.IbcPermissionUpdatePacketAck")
}

func init() { proto.RegisterFile("identity/packet.proto", fileDescriptor_62d7a4d2802770dc) }

var fileDescriptor_62d7a4d2802770dc = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xbf, 0x6a, 0xeb, 0x30,
	0x18, 0xc5, 0xed, 0x24, 0x98, 0xe4, 0xbb, 0x9b, 0x20, 0x97, 0x04, 0x72, 0xcd, 0xc5, 0xdc, 0xe1,
	0x4e, 0x76, 0x9a, 0x0e, 0x1d, 0x5a, 0x0a, 0x0d, 0x1d, 0x6a, 0x02, 0x25, 0x18, 0xba, 0x74, 0x93,
	0x6d, 0x91, 0x08, 0x27, 0x96, 0x91, 0x14, 0xa8, 0xe9, 0xd4, 0x37, 0xe8, 0x63, 0x75, 0xe8, 0x90,
	0xb1, 0x63, 0x49, 0x5e, 0xa4, 0x58, 0x56, 0xfe, 0xb4, 0x8d, 0xd3, 0x4d, 0x9f, 0xd0, 0x39, 0xe7,
	0xc7, 0x11, 0x1f, 0xb4, 0x69, 0x4c, 0x52, 0x49, 0x65, 0xee, 0x65, 0x38, 0x4a, 0x88, 0x74, 0x33,
	0xce, 0x24, 0x43, 0x3d, 0x3c, 0xcf, 0x30, 0x4f, 0xc4, 0x49, 0xbf, 0xef, 0x72, 0x32, 0xa1, 0x42,
	0xf2, 0xdc, 0xdd, 0x3c, 0x75, 0x5e, 0x6b, 0x80, 0x7c, 0x3d, 0x8c, 0x95, 0xec, 0x1a, 0x4b, 0x8c,
	0x2e, 0xc1, 0x4a, 0x59, 0x71, 0xea, 0x98, 0x7f, 0xcd, 0xff, 0xbf, 0x06, 0xff, 0xdc, 0x63, 0x2e,
	0xee, 0xad, 0x7a, 0x7b, 0x63, 0x04, 0x5a, 0x85, 0x1e, 0xa1, 0x4b, 0xc3, 0x68, 0x4c, 0xf8, 0x9c,
	0x0a, 0x41, 0x59, 0x7a, 0x97, 0xc5, 0x58, 0x92, 0x32, 0xa0, 0x53, 0x57, 0x96, 0xe7, 0xc7, 0x2d,
	0xfd, 0x2a, 0xb9, 0x4e, 0xaa, 0xf6, 0x47, 0x0c, 0xda, 0x34, 0x8c, 0x82, 0xd2, 0x12, 0x4b, 0xca,
	0x52, 0x1d, 0x5c, 0x53, 0xc1, 0x67, 0x3f, 0x06, 0x7f, 0x97, 0xea, 0xd0, 0xc3, 0xbe, 0xc3, 0x26,
	0x58, 0x65, 0xe5, 0x4e, 0x13, 0xac, 0xb2, 0x0b, 0x67, 0x04, 0xdd, 0x4a, 0x27, 0xf4, 0x1b, 0xac,
	0x29, 0x4e, 0xe3, 0x19, 0x51, 0xf5, 0xb6, 0x02, 0x3d, 0x15, 0xf7, 0x82, 0xa4, 0x31, 0xe1, 0x0a,
	0xb5, 0x15, 0xe8, 0xc9, 0x19, 0x40, 0xe7, 0xa0, 0xd9, 0x55, 0x94, 0x14, 0x9a, 0x58, 0xa4, 0x99,
	0x1f, 0x6f, 0xbc, 0xca, 0xc9, 0x79, 0x32, 0xe1, 0xcf, 0xd1, 0x12, 0x51, 0x0f, 0x5a, 0xd9, 0x22,
	0x9c, 0xd1, 0x68, 0x44, 0x72, 0x2d, 0xde, 0x5d, 0x20, 0x04, 0x0d, 0xce, 0x66, 0x44, 0x93, 0xa8,
	0xf3, 0x1e, 0x5f, 0x7d, 0x9f, 0x6f, 0x8f, 0xa1, 0xf1, 0x89, 0xe1, 0x02, 0x7a, 0x95, 0x08, 0x05,
	0xfb, 0x96, 0x20, 0xf9, 0x4a, 0x90, 0x90, 0x7c, 0xe8, 0xbf, 0xac, 0x6c, 0x73, 0xb9, 0xb2, 0xcd,
	0xf7, 0x95, 0x6d, 0x3e, 0xaf, 0x6d, 0x63, 0xb9, 0xb6, 0x8d, 0xb7, 0xb5, 0x6d, 0xdc, 0x7b, 0x13,
	0x2a, 0xa7, 0x8b, 0xd0, 0x8d, 0xd8, 0xdc, 0xdb, 0x7d, 0xa6, 0xb7, 0xf9, 0x4c, 0xef, 0xc1, 0xdb,
	0xee, 0x82, 0xcc, 0x33, 0x22, 0x42, 0x4b, 0xed, 0xc2, 0xe9, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x1a, 0x2a, 0x14, 0xf7, 0x24, 0x03, 0x00, 0x00,
}

func (m *IdentityPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdentityPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdentityPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *IdentityPacketData_NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdentityPacketData_NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoData != nil {
		{
			size, err := m.NoData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *IdentityPacketData_IbcRegistrationPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdentityPacketData_IbcRegistrationPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IbcRegistrationPacket != nil {
		{
			size, err := m.IbcRegistrationPacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *IdentityPacketData_IbcPermissionUpdatePacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdentityPacketData_IbcPermissionUpdatePacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IbcPermissionUpdatePacket != nil {
		{
			size, err := m.IbcPermissionUpdatePacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *NoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *IbcRegistrationPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IbcRegistrationPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IbcRegistrationPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Handle) > 0 {
		i -= len(m.Handle)
		copy(dAtA[i:], m.Handle)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Handle)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IbcRegistrationPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IbcRegistrationPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IbcRegistrationPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DsnpId) > 0 {
		i -= len(m.DsnpId)
		copy(dAtA[i:], m.DsnpId)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.DsnpId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IbcPermissionUpdatePacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IbcPermissionUpdatePacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IbcPermissionUpdatePacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DsnpId) > 0 {
		i -= len(m.DsnpId)
		copy(dAtA[i:], m.DsnpId)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.DsnpId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IbcPermissionUpdatePacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IbcPermissionUpdatePacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IbcPermissionUpdatePacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Publickey) > 0 {
		i -= len(m.Publickey)
		copy(dAtA[i:], m.Publickey)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Publickey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IdentityPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *IdentityPacketData_NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoData != nil {
		l = m.NoData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *IdentityPacketData_IbcRegistrationPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IbcRegistrationPacket != nil {
		l = m.IbcRegistrationPacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *IdentityPacketData_IbcPermissionUpdatePacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IbcPermissionUpdatePacket != nil {
		l = m.IbcPermissionUpdatePacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *IbcRegistrationPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Handle)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *IbcRegistrationPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DsnpId)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *IbcPermissionUpdatePacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.DsnpId)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *IbcPermissionUpdatePacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Publickey)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IdentityPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentityPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentityPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &IdentityPacketData_NoData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcRegistrationPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IbcRegistrationPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &IdentityPacketData_IbcRegistrationPacket{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcPermissionUpdatePacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IbcPermissionUpdatePacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &IdentityPacketData_IbcPermissionUpdatePacket{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IbcRegistrationPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IbcRegistrationPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IbcRegistrationPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IbcRegistrationPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IbcRegistrationPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IbcRegistrationPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DsnpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DsnpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IbcPermissionUpdatePacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IbcPermissionUpdatePacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IbcPermissionUpdatePacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DsnpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DsnpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IbcPermissionUpdatePacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IbcPermissionUpdatePacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IbcPermissionUpdatePacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publickey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publickey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
